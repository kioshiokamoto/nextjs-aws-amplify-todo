import Head from 'next/head';
import Image from 'next/image';
import Amplify, { API } from 'aws-amplify';
import { useState } from 'react';
import { v4 as uuid } from 'uuid';
import Todo from '../components/Todo';
import config from '../src/aws-exports';
import { createTodo as CreateTodo, deleteTodo as DeleteTodo } from '../src/graphql/mutations';
import { listTodos as ListTodos } from '../src/graphql/queries';

const CLIENT_ID = uuid();

Amplify.configure(config);

export default function Home({ todos }) {
	const [listOfTodos, setListOfTodos] = useState(todos);
	const [showModal, setShowModal] = useState(false);
	const [editing, setEditing] = useState(false);
	const [todoInput, setTodoInput] = useState('');
	const [description, setDescription] = useState('');

	const createTodo = async (todo, description) => {
		const newTodo = {
			name: todo,
			description,
			clientId: CLIENT_ID,
			completed: false,
			id: uuid(),
		};

		try {
			await API.graphql({
				query: CreateTodo,
				variables: { input: newTodo },
			});
			setListOfTodos((list) => [...list, { ...newTodo }]);
		} catch (err) {
			console.log('Error: ', err);
		}
	};
	const deleteTodo = async (id) => {
		try {
			await API.graphql({
				query: DeleteTodo,
				variables: { input: { id } },
			});

			const index = listOfTodos.findIndex((t) => t.id === id);
			const todos = [...listOfTodos.slice(0, index), ...listOfTodos.slice(index + 1)];
			setListOfTodos(todos);
		} catch (err) {
			console.log({ err });
		}
	};

	return (
		<>
			<Head>
				<title>Todo App | Kioshi Okamoto</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className="flex flex-col justify-center max-w-4xl mx-auto">
				<div className="my-10 text-6xl text-center text-gray-700">Simple TODO App!</div>
				<div className="flex flex-col justify-center max-w-md min-w-full mx-auto">
					<div className="flex justify-end w-full max-w-2xl mx-auto mb-2 align-end">
						<button
							className="justify-center w-40 text-xl text-white bg-teal-400 rounded-md focus:outline-none hover:bg-teal-600 active:bg-teal-600 h-11"
							onClick={() => {
								setShowModal(true);
							}}
						>
							<div className="flex justify-center">
								Agregar
								<svg
									width="16"
									height="16"
									viewBox="0 0 16 16"
									fill="none"
									xmlns="http://www.w3.org/2000/svg"
									className="mt-1.5 ml-2"
								>
									<path
										fillRule="evenodd"
										clipRule="evenodd"
										d="M8 0C8.3031 0 8.5938 0.120408 8.80812 0.334735C9.02245 0.549062 9.14286 0.839753 9.14286 1.14286V6.85714H14.8571C15.1602 6.85714 15.4509 6.97755 15.6653 7.19188C15.8796 7.40621 16 7.6969 16 8C16 8.3031 15.8796 8.5938 15.6653 8.80812C15.4509 9.02245 15.1602 9.14286 14.8571 9.14286H9.14286V14.8571C9.14286 15.1602 9.02245 15.4509 8.80812 15.6653C8.5938 15.8796 8.3031 16 8 16C7.6969 16 7.40621 15.8796 7.19188 15.6653C6.97755 15.4509 6.85714 15.1602 6.85714 14.8571V9.14286H1.14286C0.839753 9.14286 0.549062 9.02245 0.334735 8.80812C0.120408 8.5938 0 8.3031 0 8C0 7.6969 0.120408 7.40621 0.334735 7.19188C0.549062 6.97755 0.839753 6.85714 1.14286 6.85714H6.85714V1.14286C6.85714 0.839753 6.97755 0.549062 7.19188 0.334735C7.40621 0.120408 7.6969 0 8 0Z"
										fill="white"
									/>
								</svg>
							</div>
						</button>
						<button
							className="justify-center w-3 h-5 ml-2 text-xl text-white rounded-md bg-amber-300 focus:outline-none w-11 h-11 hover:bg-amber-400 active:bg-amber-400"
							onClick={() => {
								setEditing(!editing);
							}}
						>
							<div>
								<svg
									className="flex items-center justify-center flex-shrink-0 w-6 h-6 mx-auto text-gray-900"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path
										strokeLinecap="round"
										strokeLinejoin="round"
										strokeWidth="2"
										d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
									></path>
								</svg>
							</div>
						</button>
					</div>
					<div className="flex flex-col min-w-full mx-auto my-4 mb-10">
						{listOfTodos.map((todo) => (
							<Todo
								className="flex w-full h-20 max-w-2xl mx-auto my-2 bg-white rounded-md shadow-md w-2xl"
								editing={editing}
								key={todo.id}
								onClickDelete={() => {
									deleteTodo(todo.id);
								}}
								{...todo}
							/>
						))}
					</div>
				</div>
				{showModal ? (
					<div
						className="fixed inset-0 z-10 overflow-y-auto"
						aria-labelledby="modal-title"
						role="dialog"
						aria-modal="true"
					>
						<div className="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
							<div
								className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"
								aria-hidden="true"
							></div>

							<span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">
								&#8203;
							</span>

							<div className="inline-block overflow-hidden text-left align-bottom transition-all transform bg-white rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
								<div className="px-4 pt-5 pb-4 bg-white sm:p-6 sm:pb-4">
									<div className="sm:flex">
										<div className="w-full mt-3 text-center sm:mt-0 sm:mx-2 sm:text-left">
											<h3
												className="text-lg font-medium leading-6 text-gray-900"
												id="modal-title"
											>
												Crear Todo
											</h3>
											<div>
												<input
													type="text"
													placeholder="ingresa el nuevo TODO"
													name="todo"
													id="todo"
													autoComplete="off"
													value={todoInput}
													onChange={(e) => setTodoInput(e.target.value)}
													className="block w-full py-2 pl-2 mt-2 text-4xl transition duration-150 border rounded-md shadow-sm focus:border-gray-400 sm:text-sm focus:outline-none"
												></input>
												<textarea
													id="description"
													name="description"
													value={description}
													onChange={(e) => setDescription(e.target.value)}
													rows="3"
													className="block w-full py-2 pl-2 mt-1 text-sm transition duration-150 border rounded-md shadow-sm focus:border-gray-400 focus:outline-none"
													placeholder="descripcion"
													autoComplete="off"
												></textarea>
											</div>
										</div>
									</div>
								</div>
								<div className="px-4 py-3 bg-gray-50 sm:px-6 sm:flex sm:flex-row-reverse">
									<button
										type="button"
										onClick={() => {
											setShowModal(false);
											createTodo(todoInput, description);
											setDescription('');
											setTodoInput('');
										}}
										className="inline-flex justify-center w-full px-4 py-2 text-base font-medium text-white bg-blue-400 border border-transparent rounded-md shadow-sm focus:outline-none hover:bg-blue-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
									>
										Agregar
									</button>
									<button
										type="button"
										onClick={() => {
											setShowModal(false);
										}}
										className="inline-flex justify-center w-full px-4 py-2 mt-3 text-base font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none hover:bg-gray-50 focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
									>
										Cancelar
									</button>
								</div>
							</div>
						</div>
					</div>
				) : null}
			</div>
		</>
	);
}

export async function getStaticProps() {
	const todoData = await API.graphql({
		query: ListTodos,
	});
	return {
		props: {
			todos: todoData.data.listTodos.items,
		},
		revalidate: 1, // ISR!
	};
}
